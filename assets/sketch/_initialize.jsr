class Scene extends THREE.Scene {
	constructor() {
		super();
		this.fog = new THREE.FogExp2(0xeeeeee, 0.00015);
		this.background = new THREE.Color(0xeeeeee);
	}
}

class Camera extends THREE.PerspectiveCamera {
	constructor() {
		super(60, window.innerWidth / window.innerHeight, 0.1, 5000);
		this.position.y = 3500;
	}
}

class Renderer extends THREE.WebGLRenderer {
	constructor() {
		super({ antialias: true });
		
		/* TODO: disable on lite mode */
		this.shadowMap.enabled = true;
		this.shadowMap.type = THREE.VSMShadowMap;
		this.outputEncoding = THREE.sRGBEncoding;

		this.setSize(window.innerWidth, window.innerHeight);
		this.setPixelRatio(0.9);
	}
}

class AmbientLight extends THREE.AmbientLight {
	constructor(scene) {
		super(0x222222, 2);
		this.scene = scene;
		this.scene.add(this);
	}
}

class DirectionalLight extends THREE.DirectionalLight {
	constructor() {
		super(0xaabbff);
		this.shadow.camera.top = 1000;
		this.shadow.camera.bottom = -1000;
		this.shadow.camera.left = -1000;
		this.shadow.camera.right = 1000;
		this.shadow.camera.near = 1;
		this.shadow.camera.far = 2000;
		this.shadow.mapSize.set(512, 512);
	}
}

class HeadLight extends DirectionalLight {
	constructor(scene) {
		super();
		this.scene = scene;
		this.position.x = 700;
		this.position.y = 1000;
		this.position.z = 200;
		this.intensity = 0.5;
		this.castShadow = true;
		this.scene.add(this);	
	}
	debug() {
		return new THREE.CameraHelper(this.shadow.camera);
	}
}

class FloorLight extends DirectionalLight {
	constructor(scene) {
		super();
		this.scene = scene;
		this.position.x = -700;
		this.position.y = -1000;
		this.position.z = -200;
		this.intensity = 0.2;
		this.castShadow = false;
		this.scene.add(this);	
	}
	debug() {
		return new THREE.CameraHelper(this.shadow.camera);
	}
}

class Plane extends THREE.Mesh {
	constructor(scene) {
		super();
		this.scene = scene;
		this.geometry = new THREE.PlaneGeometry(1, 1, 1);
		this.material = new THREE.MeshPhongMaterial({ color: 0x2f3542 });
		this.position.x = 0;
		this.position.y = 0;
		this.position.z = 0;
		this.scale.x = 5000;
		this.scale.y = 10000;
		this.scale.z = 1;
		this.receiveShadow = true;
		this.rotation.x = -(Math.PI / 2);
		this.scene.add(this);
	}
}

class World {
	constructor(scene, callback) {
		this.scene = scene;		
		this.callback = callback;

		new _Loader().parse(
			_Model,
			'',
			this.onLoad,
			this.onError
		);
	}

	onLoad = world => {
		let meshGroup = world.scene.children;

		meshGroup = meshGroup.filter(mesh => {
			// don't include in renderer
			return mesh.name !== 'Sphere' && mesh.name !== 'Cube012' && mesh.name !== 'Human_Scale';
		});

		meshGroup.forEach(mesh => {
			mesh.material = new THREE.MeshPhongMaterial({
				color: 0xcccccc,
				opacity: 0.8,
				transparent: true
			});

			mesh.castShadow = true;
			mesh.receiveShadow = true;
			mesh.userData.id = mesh.name;
			mesh.userData.isEntity = true;
		});

		world.scene.children = meshGroup;
		world.scene.scale.x = 4;
		world.scene.scale.y = 4;
		world.scene.scale.z = 4;
		world.scene.position.y = 2;

		this.scene.add(world.scene);
		this.callback();
	};

	onError = error => alert(error);
}

class Control extends Controller {
	constructor(camera, renderer) {
		super(camera, renderer.domElement);
		this.touches.one = Controller.ACTION.TOUCH_TRUCK;
		this.touches.two = Controller.ACTION.TOUCH_DOLLY_ROTATE;
		this.touches.three = Controller.ACTION.NONE;
		this.mouseButtons.left = Controller.ACTION.TRUCK;
		this.mouseButtons.right = Controller.ACTION.ROTATE;
		this.mouseButtons.middle = Controller.ACTION.NONE;
		this.verticalDragToForward = true;
		this.maxPolarAngle = 0.8;
		this.minDistance = 500;
		this.maxDistance = 1600;
		this.draggingDampingFactor = 0.08;	
		this.dollySpeed = 0.5;
		this.setBoundary(
			// truck constraint
			new THREE.Box3(
				new THREE.Vector3(-500, -500, -650),
				new THREE.Vector3(700, 0, 300)
			)
		);
	}

	gotoStart() {
		this.setPosition(0, 1300, 100, true);
		this.polarAngle = 0.001;
	}
}

// boilerplate
let scene, camera, renderer, control;

scene = new Scene();
camera = new Camera();
renderer = new Renderer();

control = new Control(camera, renderer);

new AmbientLight(scene);
new HeadLight(scene);
new FloorLight(scene);

/* TODO: disable on lite mode */
new Plane(scene);

new World(scene, () => {
	control.gotoStart();
});


// const geometry = new THREE.BoxGeometry(1, 1, 1);
// geometry.translate(0, 0.5, 0);
// const material = new THREE.MeshPhongMaterial({
// 	color: 0xffffff,
// 	flatShading: true,
// });

// for (let i = 0; i < 500; i++) {
// 	const mesh = new THREE.Mesh(geometry, material);
// 	mesh.position.x = Math.random() * 1600 - 800;
// 	mesh.position.y = 0;
// 	mesh.position.z = Math.random() * 1600 - 800;
// 	mesh.scale.x = 20;
// 	mesh.scale.y = Math.random() * 80 + 10;
// 	mesh.scale.z = 20;
// 	mesh.castShadow = true;
// 	mesh.receiveShadow = true;
// 	scene.add(mesh);
// }


renderer.render(scene, camera);
document
	.getElementsByTagName('BODY')[0]
	.appendChild(renderer.domElement);