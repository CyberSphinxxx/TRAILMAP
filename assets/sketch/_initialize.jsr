class Scene extends THREE.Scene {
	constructor() {
		super();
		this.fog = new THREE.FogExp2(0xC5C9DB, 0.0003);
		this.background = new THREE.Color(0xC5C9DB);
	}
}

class Camera extends THREE.PerspectiveCamera {
	constructor() {
		super(80, window.innerWidth / window.innerHeight, 0.1, 5000);
		this.position.y = 3500;
	}
}

class Renderer extends THREE.WebGLRenderer {
	constructor() {
		super({ antialias: true });
		this.shadowMap.enabled = true;
		this.shadowMap.autoUpdate = false;
		this.shadowMap.type = THREE.VSMShadowMap;
		this.outputEncoding = THREE.sRGBEncoding;
		this.setSize(window.innerWidth, window.innerHeight);
		this.setPixelRatio(0.9);
	}
}

class AmbientLight extends THREE.AmbientLight {
	constructor() {
		super(0xc5c5c5, 0.4);
	}
}

class DirectionalLight extends THREE.DirectionalLight {
	constructor() {
		super(0xaabbff);
		this.shadow.camera.top = 1000;
		this.shadow.camera.bottom = -1000;
		this.shadow.camera.left = -1000;
		this.shadow.camera.right = 1000;
		this.shadow.camera.near = 1;
		this.shadow.camera.far = 2000;
		this.shadow.mapSize.set(512, 512);
	}
}

class HeadLight extends DirectionalLight {
	constructor() {
		super();
		this.position.x = 700;
		this.position.y = 1000;
		this.position.z = 200;
		this.intensity = 0.7;
		this.castShadow = true;	
	}
	debug() {
		return new THREE.CameraHelper(this.shadow.camera);
	}
}

class FloorLight extends DirectionalLight {
	constructor() {
		super();
		this.position.x = -700;
		this.position.y = -1000;
		this.position.z = -200;
		this.intensity = 0.2;
		this.castShadow = false;	
	}
	debug() {
		return new THREE.CameraHelper(this.shadow.camera);
	}
}

class World {
	constructor(scene, callback) {
		this.scene = scene;		
		this.callback = callback;

		new _Loader().parse(
			_Model,
			'',
			this.onLoad,
			this.onError
		);
	}

	onLoad = world => {
		let meshGroup = world.scene.children;

		meshGroup = meshGroup.filter(mesh => {
			// don't include in renderer
			return mesh.name !== 'Road_2Boolean';
		});

		meshGroup.forEach(mesh => {
			
			mesh.material = new THREE.MeshPhongMaterial({
				color: 0x222222,
				flatShading: true,
				// opacity: 0.1,
				// tranparent: true
			});

			mesh.castShadow = true;
			mesh.receiveShadow = true;
			mesh.userData.id = mesh.name;
			mesh.userData.isEntity = true;
		});

		const floor = new THREE.Mesh();
		floor.geometry = new THREE.PlaneGeometry(1, 1, 1);
		floor.material = new THREE.MeshPhongMaterial(
			{ 
				color: 0xC5C9DB,
				flatShading: true,
				opacity: 0.8, 
				transparent: true
			});

		floor.position.x = 0;
		floor.position.y = 0;
		floor.position.z = 0;
		floor.scale.x = 10000;
		floor.scale.y = 10000;
		floor.scale.z = 10000;
		floor.castShadow = false;
		floor.receiveShadow = true;
		floor.rotation.x = -(Math.PI / 2);
		
		world.scene.children = meshGroup;
		world.scene.scale.x = 5;
		world.scene.scale.y = 5;
		world.scene.scale.z = 5;
		world.scene.position.y = 2;

		this.scene.add(world.scene);
		this.scene.add(floor);
		this.callback();
	};

	onError = error => alert(error);
}

class Control extends Controller {
	constructor(camera, renderer) {
		super(camera, renderer.domElement);
		this.touches.one = Controller.ACTION.TOUCH_TRUCK;
		this.touches.two = Controller.ACTION.TOUCH_DOLLY_ROTATE;
		this.touches.three = Controller.ACTION.NONE;
		this.mouseButtons.left = Controller.ACTION.TRUCK;
		this.mouseButtons.right = Controller.ACTION.ROTATE;
		this.mouseButtons.middle = Controller.ACTION.NONE;
		this.verticalDragToForward = true;
		this.maxPolarAngle = (Math.PI / 2) - 0.4;
		this.minDistance = 500;
		this.maxDistance = 1000;
		this.draggingDampingFactor = 0.08;	
		this.dollySpeed = 0.5;
		this.setBoundary(
			// truck constraint
			new THREE.Box3(
				new THREE.Vector3(-500, -500, -650),
				new THREE.Vector3(700, 0, 300)
			)
		);
	}

	gotoStart() {
		setTimeout(() => {
			this.dollyTo(950, true);
		}, 500);
	}
}

// boilerplate
let scene, camera, renderer, control;

scene = new Scene();
camera = new Camera();
renderer = new Renderer();
control = new Control(camera, renderer);

scene.add(new HeadLight());
scene.add(new FloorLight());
scene.add(new AmbientLight());

new World(scene, (onload) => {
	control.gotoStart();
	renderer.shadowMap.needsUpdate = true;
});

renderer.render(scene, camera);
document
	.getElementsByTagName('BODY')[0]
	.appendChild(renderer.domElement);